Basic Operators:
=================
- There are various operators supported by each shell. We will discuss in detail about Bourne shell (default shell) in this chapter.
- We will now discuss the following operators −
. Arithmetic Operators
. Relational Operators
. Boolean Operators
. String Operators
. File Test Operators

Ex:
----
#!/bin/sh

val=`expr 2 + 2`
echo "Total value : $val"
The above script will generate the following result −
Total value : 4

1. Arithmetic Operators:
-------------------------
- The following arithmetic operators are supported by Bourne Shell.
- Assume variable a holds 10 and variable b holds 20 then 

+ (Addition)	      Adds values on either side of the operator	`expr $a + $b` will give 30
- (Subtraction)   	Subtracts right hand operand from left hand operand	`expr $a - $b` will give -10
* (Multiplication)	Multiplies values on either side of the operator	`expr $a \* $b` will give 200
/ (Division)	      Divides left hand operand by right hand operand	`expr $b / $a` will give 2
% (Modulus)	        Divides left hand operand by right hand operand and returns remainder	`expr $b % $a` will give 0
= (Assignment)    	Assigns right operand in left operand	a = $b would assign value of b into a
== (Equality)	      Compares two numbers, if both are same then returns true.	[ $a == $b ] would return false.
!= (Not Equality)	  Compares two numbers, if both are different then returns true.	[ $a != $b ] would return true.

Note: It is very important to understand that all the conditional expressions should be inside square braces with spaces around them, 
      for example [ $a == $b ] is correct whereas, [$a==$b] is incorrect.

2.Relational Operators:
-------------------------
- These operators do not work for string values unless their value is numeric.
- For example, following operators will work to check a relation between 10 and 20 as well as in between 
  "10" and "20" but not in between "ten" and "twenty".  
- Assume variable a holds 10 and variable b holds 20 then −

-eq	Checks if the value of two operands are equal or not; if yes, then the condition becomes true.	  [ $a -eq $b ] is not true.
-ne	Checks if the value of two operands are equal or not; if values are not equal, then the condition becomes true.  	[ $a -ne $b ] is true.
-gt	Checks if the value of left operand is greater than the value of right operand; if yes, then the condition becomes true.	   [ $a -gt $b ] is not true.
-lt	Checks if the value of left operand is less than the value of right operand; if yes, then the condition becomes true.   	[ $a -lt $b ] is true.
-ge	Checks if the value of left operand is greater than or equal to the value of right operand; if yes, then the condition becomes true.	   [ $a -ge $b ] is not true.
-le	Checks if the value of left operand is less than or equal to the value of right operand; if yes, then the condition becomes true.   	[ $a -le $b ] is true.

NOTE: It is very important to understand that all the conditional expressions should be placed inside square braces with spaces around them. 
      For example, [ $a <= $b ] is correct whereas, [$a <= $b] is incorrect.
      
3.Boolean Operators:
--------------------
- Assume variable a holds 10 and variable b holds 20 then −

!	This is logical negation. This inverts a true condition into false and vice versa.         	[ ! false ] is true.
-o	This is logical OR. If one of the operands is true, then the condition becomes true.	   [ $a -lt 20 -o $b -gt 100 ] is true.
-a	This is logical AND. If both the operands are true, then the condition becomes true otherwise false.   	[ $a -lt 20 -a $b -gt 100 ] is false.

4. String Operators:
---------------------
- The following string operators are supported by Bourne Shell.
- Assume variable a holds "abc" and variable b holds "efg" then −

=	Checks if the value of two operands are equal or not; if yes, then the condition becomes true.	[ $a = $b ] is not true.
!=	Checks if the value of two operands are equal or not; if values are not equal then the condition becomes true.	[ $a != $b ] is true.
-z	Checks if the given string operand size is zero; if it is zero length, then it returns true.	[ -z $a ] is not true.
-n	Checks if the given string operand size is non-zero; if it is nonzero length, then it returns true.	[ -n $a ] is not false.
str	Checks if str is not the empty string; if it is empty, then it returns false.	[ $a ] is not false.

5. File Test Operators:
---------------------------
- We have a few operators that can be used to test various properties associated with a Unix file.
- Assume a variable file holds an existing file name "test" the size of which is 100 bytes and has read, write and execute permission on −

