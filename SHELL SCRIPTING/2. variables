Using Shell Variables:
======================
- A variable is a character string to which we assign a value. The value assigned could be a number, text, filename, device, or any other type of data.
- A variable is nothing more than a pointer to the actual data. The shell enables you to create, assign, and delete variables.

1. Variable Names:
------------------
- The name of a variable can contain only letters (a to z or A to Z), numbers ( 0 to 9) or the underscore character ( _).
Ex: Valid Names
----
. _ALI
. TOKEN_A
. VAR_1
. VAR_2

Ex: Invalid Names:
---
. 2_VAR
. -VARIABLE
. VAR1-VAR2
. VAR_A!

2.Defining Variables: you can define any value in variables.
---------------------
Variables are defined as  " NAME="Zara Ali" "
VAR1="Zara Ali"
VAR2=100

3.Accessing Values:
---------------------
- To access the value stored in a variable, prefix its name with the dollar sign ($):
Ex:
----
#!/bin/sh

NAME="Zara Ali"
echo $NAME

. The above script will produce the following value −
 Zara Ali

4. Unsetting Variable:
---------------------------
- Unsetting or deleting a variable directs the shell to remove the variable from the list of variables 
ex:
---
#!/bin/sh

NAME="Zara Ali"
unset NAME
echo $NAME


5.Variable Types:
------------------
- When a shell is running, three main types of variables are present −

Local Variables − A local variable is a variable that is present within the current instance of the shell. 
                  It is not available to programs that are started by the shell. They are set at the command prompt.

Environment Variables − An environment variable is available to any child process of the shell. 
                        Some programs need environment variables in order to function correctly. 
                        Usually, a shell script defines only those environment variables that are needed by the programs that it runs.

Shell Variables − A shell variable is a special variable that is set by the shell and is required by the shell in order to function correctly. 
                  Some of these variables are environment variables whereas others are local variables.

-------------------------------------------------------------------------------------------------------------------------------------------------------

6. Special Variables:
----------------------
. $0  : The filename of the current script
. $?  : The exit status of the last command executed
. $$  : The process number of the current shell. For shell scripts, this is the process ID under which they are executing.
. $!  : The process number of the last background command.

Example:
--------
Following script uses various special variables related to the command line −

#!/bin/sh

echo "File Name: $0"
echo "First Parameter : $1"
echo "Second Parameter : $2"
echo "Quoted Values: $@"
echo "Quoted Values: $*"
echo "Total Number of Parameters : $#"

Here is a sample run for the above script −

$./test.sh Zara Ali
File Name : ./test.sh
First Parameter : Zara
Second Parameter : Ali
Quoted Values: Zara Ali
Quoted Values: Zara Ali
Total Number of Parameters : 2


7. Exit Status:
-----------------
. The $? variable represents the exit status of the previous command.
. Exit status is a numerical value returned by every command upon its completion. As a rule, most commands return an exit status of 0 
  if they were successful, and 1 if they were unsuccessful.
  
- Following is the example of successful command −

$./test.sh Zara Ali
File Name : ./test.sh
First Parameter : Zara
Second Parameter : Ali
Quoted Values: Zara Ali
Quoted Values: Zara Ali
Total Number of Parameters : 2
$echo $?
0
$
